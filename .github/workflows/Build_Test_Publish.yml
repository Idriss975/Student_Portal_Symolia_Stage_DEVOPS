name: Build, Test, and Publish

on:
  workflow_call:


jobs:
  Build:
    runs-on: ubuntu-latest
    outputs:
            arti_title: ${{ steps.Output.outputs.arti_title }}
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Checkout to tagged commit
        run: git checkout $(git describe --tags)

      - name: Setup dotnet 8.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      - name: Make Artifact Directory
        run: mkdir -p ~/artifactdir/docker

      - name: Build the Published WINx64 version
        run: dotnet publish -r win-x64 -o ~/artifactdir
      
      - name: Build the Published Linux64 version
        run: dotnet publish -r linux-x64 -o ~/artifactdir
                  
      - name: Build the Published Docker version
        run: |
          docker build -t Student_Portal .
          docker save Student_Portal | gzip > ~/artifactdir/Student_Portal_Docker_Image.tar.gz

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ GITHUB.ref_name }}
          path: ~/artifactdir
          if-no-files-found: error
      - id: Output
        run: echo "arti_title=artifact-${{ GITHUB.ref_name }}" >> $GITHUB_OUTPUT


############################## Deployment Test #########################

  Deployment_Test_Windows:
    runs-on: windows-2022
    needs: Build
    env:
      MSSQL_SERVER: ${{ secrets.MSSQL_SERVER }}
      MSSQL_SA_PASSWORD: ${{ secrets.MSSQL_SA_PASSWORD }}
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.Build.outputs.arti_title }}

      - name: Pull mssql Docker Image
        run: docker pull mcr.microsoft.com/mssql/server:2022-latest
  
      - name: Run mssql as Docker Container
        run: |
            docker run -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=${{ secrets.MSSQL_SA_PASSWORD }}" -p 1433:1433 --name sql1 --hostname sql1 mcr.microsoft.com/mssql/server:2022-latest
            docker exec sql1 /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P ${{ secrets.MSSQL_SA_PASSWORD }} -Q "create database StudentPortalDb" -No
            docker exec sql1 /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P ${{ secrets.MSSQL_SA_PASSWORD }} -Q "use StudentPortalDb; CREATE TABLE students (
            Id INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
            Name NVARCHAR(MAX) NOT NULL,
            Email NVARCHAR(MAX) NOT NULL,
            Phone NVARCHAR(MAX) NOT NULL,
            Subscribed BIT NOT NULL
            );" -No
            docker exec sql1 /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P ${{ secrets.MSSQL_SA_PASSWORD }} -Q "use StudentPortalDb; insert into students (Name, Email, Phone, Subscribed) values ('BERCHIL', 'Idriss', '0611223344', 1)" -No
  
      - name: run Student_Portal
        run: |
            cp ./win-x64/* .
            ./StudentPortal.Web.exe

      - name: Deploy Test 1
        run: curl --silent --request 'GET' --url 'http://localhost/Home'
      - name: Deploy Test 2
        run: curl --silent --request 'GET' --url 'http://localhost/Home/Privacy'
      - name: Deploy Test 3
        run: curl --silent --request 'GET' --url 'http://localhost/Students'
      - name: Deploy Test 4
        run: curl --silent --request 'GET' --url 'http://localhost/Students/Add'
      - name: Deploy Test 5
        run: curl --silent --request 'GET' --url 'http://localhost/Students/Edit/1'


  Deployement_Test_Linux:
    runs-on: ubuntu-latest
    needs: Build
    env:
      MSSQL_SERVER: ${{ secrets.MSSQL_SERVER }}
      MSSQL_SA_PASSWORD: ${{ secrets.MSSQL_SA_PASSWORD }}
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.Build.outputs.arti_title }}

      - name: Pull mssql Docker Image
        run: docker pull mcr.microsoft.com/mssql/server:2022-latest
  
      - name: Run mssql as Docker Container
        run: |
            docker run -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=${{ secrets.MSSQL_SA_PASSWORD }}" -p 1433:1433 --name sql1 --hostname sql1 mcr.microsoft.com/mssql/server:2022-latest
            docker exec sql1 /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P ${{ secrets.MSSQL_SA_PASSWORD }} -Q "create database StudentPortalDb" -No
            docker exec sql1 /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P ${{ secrets.MSSQL_SA_PASSWORD }} -Q "use StudentPortalDb; CREATE TABLE students (
            Id INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
            Name NVARCHAR(MAX) NOT NULL,
            Email NVARCHAR(MAX) NOT NULL,
            Phone NVARCHAR(MAX) NOT NULL,
            Subscribed BIT NOT NULL
            );" -No
            docker exec sql1 /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P ${{ secrets.MSSQL_SA_PASSWORD }} -Q "use StudentPortalDb; insert into students (Name, Email, Phone, Subscribed) values ('BERCHIL', 'Idriss', '0611223344', 1)" -No

      - name: run Student_Portal
        run: |
            cp -r ./linux-x64/* .
            ./StudentPortal.Web
        
      - name: Deploy Test 1
        run: curl --silent --request 'GET' --url 'http://localhost/Home'
      - name: Deploy Test 2
        run: curl --silent --request 'GET' --url 'http://localhost/Home/Privacy'
      - name: Deploy Test 3
        run: curl --silent --request 'GET' --url 'http://localhost/Students'
      - name: Deploy Test 4
        run: curl --silent --request 'GET' --url 'http://localhost/Students/Add'
      - name: Deploy Test 5
        run: curl --silent --request 'GET' --url 'http://localhost/Students/Edit/1'


  Deployement_Test_Docker:
    runs-on: ubuntu-latest
    needs: Build
    env:
      MSSQL_SERVER: ${{ secrets.MSSQL_SERVER }}
      MSSQL_SA_PASSWORD: ${{ secrets.MSSQL_SA_PASSWORD }}
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.Build.outputs.arti_title }}

      - name: Pull mssql Docker Image
        run: docker pull mcr.microsoft.com/mssql/server:2022-latest
  
      - name: Run mssql as Docker Container
        run: |
            docker run -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=${{ secrets.MSSQL_SA_PASSWORD }}" -p 1433:1433 --name sql1 --hostname sql1 mcr.microsoft.com/mssql/server:2022-latest
            docker exec sql1 /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P ${{ secrets.MSSQL_SA_PASSWORD }} -Q "create database StudentPortalDb" -No
            docker exec sql1 /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P ${{ secrets.MSSQL_SA_PASSWORD }} -Q "use StudentPortalDb; CREATE TABLE students (
            Id INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
            Name NVARCHAR(MAX) NOT NULL,
            Email NVARCHAR(MAX) NOT NULL,
            Phone NVARCHAR(MAX) NOT NULL,
            Subscribed BIT NOT NULL
            );" -No
            docker exec sql1 /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P ${{ secrets.MSSQL_SA_PASSWORD }} -Q "use StudentPortalDb; insert into students (Name, Email, Phone, Subscribed) values ('BERCHIL', 'Idriss', '0611223344', 1)" -No

      - name: Load Image and Run Container Student_Portal
        run: |
            docker load < ./Student_Portal_Docker_Image.tar.gz
            docker run -e "MSSQL_SERVER=${MSSQL_SERVER}" -e "MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}" -p 80:80 Student_Portal
        
      - name: Deploy Test 1
        run: curl --silent --request 'GET' --url 'http://localhost/Home'
      - name: Deploy Test 2
        run: curl --silent --request 'GET' --url 'http://localhost/Home/Privacy'
      - name: Deploy Test 3
        run: curl --silent --request 'GET' --url 'http://localhost/Students'
      - name: Deploy Test 4
        run: curl --silent --request 'GET' --url 'http://localhost/Students/Add'
      - name: Deploy Test 5
        run: curl --silent --request 'GET' --url 'http://localhost/Students/Edit/1'

 
 
################################# Release ###################################
 
  Release_to_Github:
    runs-on: ubuntu-latest
    needs: [Build, Deployment_Test_Windows, Deployement_Test_Linux, Deployement_Test_Docker]
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.Build.outputs.arti_title }}

      - name: Compress Release Folders
        run: |
          tar -czf Student_Portal_win64.tar.gz win-x64
          tar -czf Student_Portal_linuxx64.tar.gz linux-x64
          rm -rf win-x64 linux-x64

      - name: Create Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: Student Portal ${{ GITHUB.ref_name }}
          files: |
             ./Student_Portal_win64.tar.gz
             Student_Portal_linuxx64.tar.gz
             Student_Portal_Docker_Image.tar.gz

  Release_to_DockeHub:
    runs-on: ubuntu-latest
    needs: [Build, Deployment_Test_Windows, Deployement_Test_Linux, Deployement_Test_Docker]
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.Build.outputs.arti_title }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
         username: ${{ vars.DOCKER_USR }}
         password: ${{ secrets.DOCKER_TOKEN }}

      - name: Load Image 
        run: docker load < ./Student_Portal_Docker_Image.tar.gz

      - name: Tag Image
        run: docker image tag Student_Portal ${{ vars.DOCKER_USR }}/Student_Portal:latest

      - name: Upload Tag
        run: docker image push ${{ vars.DOCKER_USR }}/Student_Portal:latest
